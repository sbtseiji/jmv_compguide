{"version":3,"sources":["../src/2.1.10.js"],"names":["reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","numberWithComma","strictMatchReg","match","exec","matchedString","forEach","subMatch","index","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,MAAI;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAtD;AACA,SAAO;AACH,KAACC,MAAM,CAACK,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;;AACD,UAAIQ,IAAI,GAAGH,SAAS,CAACE,IAAD,CAApB,CAJe,CAKf;;AACA,UAAIE,eAAe,GAAG,WAAtB,CANe,CAOf;;AACA,UAAIC,cAAc,GAAG,YAArB;AACA,UAAIC,KAAJ;;AACA,aAAQA,KAAK,GAAGF,eAAe,CAACG,IAAhB,CAAqBJ,IAArB,CAAhB,EAA6C;AACzC;AACA;AACA,YAAIK,aAAa,GAAGF,KAAK,CAAC,CAAD,CAAzB;AACA,8CAAqBE,aAArB,EAAoCH,cAApC,EAAoDI,OAApD,CAA6DC,QAAD,IAAc;AACtE,cAAM;AAAEC,YAAAA;AAAF,cAAYD,QAAlB;AACAZ,UAAAA,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,mBAAd,EAAmC;AAC/Bc,YAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,GAAcA,KADU;AAE/BC,YAAAA,GAAG,EAAEb,KAAK,CAACc,gBAAN,CAAuB,CAACP,KAAK,CAACK,KAAN,GAAcA,KAAf,EAAsBL,KAAK,CAACK,KAAN,GAAcA,KAAd,GAAsB,CAA5C,CAAvB,EAAuE,GAAvE;AAF0B,WAAnC,CAFE,CAAN;AAOH,SATD;AAUH;AACJ;;AA1BE,GAAP;AA4BH;;AACDG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAEtB,QADK;AAEbK,EAAAA,KAAK,EAAEL;AAFM,CAAjB","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.10.算用数字の位取りの表記\n桁区切りには「カンマ」、小数点には「ピリオド」を使います。\nただし桁区切りの「カンマ」は省略する場合があります。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            // 数字,で絞って\n            let numberWithComma = /([\\d,]+)/g;\n            // 0,xxx な文字列を検出する\n            let strictMatchReg = /^0+(,)\\d+$/;\n            let match;\n            while ((match = numberWithComma.exec(text))) {\n                // この段階では 10,000 も含まれている\n                // ^0,xxx をだけを取り出す\n                let matchedString = match[0];\n                matchCaptureGroupAll(matchedString, strictMatchReg).forEach((subMatch) => {\n                    const { index } = subMatch;\n                    report(\n                        node,\n                        new RuleError(\"小数点には「ピリオド」を使います。\", {\n                            index: match.index + index,\n                            fix: fixer.replaceTextRange([match.index + index, match.index + index + 1], \".\")\n                        })\n                    );\n                });\n            }\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"2.1.10.js"}