{"version":3,"sources":["../src/4.1.1.js"],"names":["brackets","leftBrackets","map","bracket","RegExp","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","forEach","pattern","match","index","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA,IAAMA,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,CAAjB;AACA,IAAMC,YAAY,GAAGD,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AAC3C,SAAO,IAAIC,MAAJ,CAAW,QAAQD,OAAnB,EAA4B,GAA5B,CAAP;AACH,CAFoB,CAArB;;AAGA,IAAIE,QAAQ,GAAG,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AACtC,MAAI;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAtD;AACA,SAAO;AACH,KAACC,MAAM,CAACK,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;;AACD,UAAIQ,IAAI,GAAGH,SAAS,CAACE,IAAD,CAApB;AACAZ,MAAAA,YAAY,CAACc,OAAb,CAAsBC,OAAD,IAAa;AAC9B,8CAAqBF,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA6CE,KAAD,IAAW;AACnD,cAAM;AAAEC,YAAAA;AAAF,cAAYD,KAAlB;AACAR,UAAAA,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,kCAAd,EAAkD;AAC9CU,YAAAA,KAAK,EAAEA,KADuC;AAE9CC,YAAAA,GAAG,EAAET,KAAK,CAACU,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAAvB,EAA2C,EAA3C;AAFyC,WAAlD,CAFE,CAAN;AAOH,SATD;AAUH,OAXD;AAYH;;AAlBE,GAAP;AAoBH,CAtBD;;AAuBAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAElB,QADK;AAEbK,EAAAA,KAAK,EAAEL;AAFM,CAAjB","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.1.1. 句点(。)\n句点(。)は「全角」で表記します。\n句点は文の終わりに付けます。\n文中にかぎかっこが入る場合は、閉じかっこの前に句点を打ちません。\n文中に丸かっこが入る場合も閉じかっこの前に句点を打ちません。。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nconst brackets = [\"」\", \"）\", \"\\\\)\"];\nconst leftBrackets = brackets.map((bracket) => {\n    return new RegExp(\"(。)\" + bracket, \"g\");\n});\nvar reporter = function reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            leftBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index } = match;\n                    report(\n                        node,\n                        new RuleError(\"文中にかぎかっこが入る場合は、閉じかっこの前に句点を打ちません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n        }\n    };\n};\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"4.1.1.js"}