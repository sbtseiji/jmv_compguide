{"version":3,"sources":["../src/2.1.8.js"],"names":["toHankaku","string","convert","toString","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","matchRegExp","forEach","match","index","fix","replaceTextRange","length","module","exports","linter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;;;AACA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,SAAO,mBAAKA,MAAL,EAAaC,OAAb,CAAqB,IAArB,EAA2B,IAA3B,EAAiCC,QAAjC,EAAP;AACH;;AACD,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,MAAI;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAtD;AACA,SAAO;AACH,KAACC,MAAM,CAACK,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;;AACD,UAAMQ,IAAI,GAAGH,SAAS,CAACE,IAAD,CAAtB;AACA,UAAME,WAAW,GAAG,UAApB;AACA,4CAAqBD,IAArB,EAA2BC,WAA3B,EAAwCC,OAAxC,CAAiDC,KAAD,IAAW;AACvD,YAAM;AAAEC,UAAAA,KAAF;AAASJ,UAAAA;AAAT,YAAkBG,KAAxB;AACAR,QAAAA,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,kBAAd,EAAkC;AAC9BU,UAAAA,KAAK,EAAEA,KADuB;AAE9BC,UAAAA,GAAG,EAAET,KAAK,CAACU,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAGJ,IAAI,CAACO,MAArB,CAAvB,EAAqDpB,SAAS,CAACa,IAAD,CAA9D;AAFyB,SAAlC,CAFE,CAAN;AAOH,OATD;AAUH;;AAjBE,GAAP;AAmBH;;AACDQ,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAEnB,QADK;AAEbK,EAAAA,KAAK,EAAEL;AAFM,CAAjB","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.8.算用数字\n算用数字は「半角」で表記します。\n用途によっては全角を許容します。\nただし、表記をできるだけ統一するため、特別な理由がない限り半角での表記を原則とします。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport moji from \"moji\";\nimport { matchCaptureGroupAll } from \"match-index\";\nfunction toHankaku(string) {\n    return moji(string).convert(\"ZE\", \"HE\").toString();\n}\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            const matchRegExp = /([０-９]+)/;\n            matchCaptureGroupAll(text, matchRegExp).forEach((match) => {\n                const { index, text } = match;\n                report(\n                    node,\n                    new RuleError(\"算用数字は「半角」で表記します。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + text.length], toHankaku(text))\n                    })\n                );\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"2.1.8.js"}