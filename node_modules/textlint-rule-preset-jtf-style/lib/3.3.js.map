{"version":3,"sources":["../src/3.3.js"],"names":["brackets","leftBrackets","map","bracket","RegExp","rightBrackets","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","forEach","pattern","match","index","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAkD,GAAlD,CAAjB;AAEA,IAAMC,YAAY,GAAGD,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AAC3C,SAAO,IAAIC,MAAJ,CAAW,WAAWD,OAAtB,EAA+B,GAA/B,CAAP;AACH,CAFoB,CAArB;AAGA,IAAME,aAAa,GAAGL,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AAC5C,SAAO,IAAIC,MAAJ,CAAWD,OAAO,GAAG,QAArB,EAA+B,GAA/B,CAAP;AACH,CAFqB,CAAtB;;AAGA,SAASG,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,MAAI;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAtD;AACA,SAAO;AACH,KAACC,MAAM,CAACK,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;;AACD,UAAMQ,IAAI,GAAGH,SAAS,CAACE,IAAD,CAAtB,CAJe,CAKf;;AACAb,MAAAA,YAAY,CAACe,OAAb,CAAsBC,OAAD,IAAa;AAC9B,8CAAqBF,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA6CE,KAAD,IAAW;AACnD,cAAM;AAAEC,YAAAA;AAAF,cAAYD,KAAlB;AACAR,UAAAA,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,yBAAd,EAAyC;AACrCU,YAAAA,KAAK,EAAEA,KAD8B;AAErCC,YAAAA,GAAG,EAAET,KAAK,CAACU,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAAvB,EAA2C,EAA3C;AAFgC,WAAzC,CAFE,CAAN;AAOH,SATD;AAUH,OAXD,EANe,CAkBf;;AACAd,MAAAA,aAAa,CAACW,OAAd,CAAuBC,OAAD,IAAa;AAC/B,8CAAqBF,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA6CE,KAAD,IAAW;AACnD,cAAM;AAAEC,YAAAA,KAAF;AAASJ,YAAAA;AAAT,cAAkBG,KAAxB;AACAR,UAAAA,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,yBAAd,EAAyC;AACrCU,YAAAA,KAAK,EAAEA,KAD8B;AAErCC,YAAAA,GAAG,EAAET,KAAK,CAACU,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAAvB,EAA2C,EAA3C;AAFgC,WAAzC,CAFE,CAAN;AAOH,SATD;AAUH,OAXD;AAYH;;AAhCE,GAAP;AAkCH;;AACDG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAElB,QADK;AAEbK,EAAAA,KAAK,EAAEL;AAFM,CAAjB","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n3.3. かっこ類と隣接する文字の間のスペースの有無\nかっこの外側、内側ともにスペースを入れません。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\n\nconst brackets = [\"\\\\[\", \"\\\\]\", \"（\", \"）\", \"［\", \"］\", \"「\", \"」\", \"『\", \"』\"];\n\nconst leftBrackets = brackets.map((bracket) => {\n    return new RegExp(\"([ 　])\" + bracket, \"g\");\n});\nconst rightBrackets = brackets.map((bracket) => {\n    return new RegExp(bracket + \"([ 　])\", \"g\");\n});\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 左にスペース\n            leftBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index } = match;\n                    report(\n                        node,\n                        new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n            // 右にスペース\n            rightBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index, text } = match;\n                    report(\n                        node,\n                        new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"3.3.js"}