{"version":3,"sources":["../src/2.1.5.js"],"names":["toZenkaku","string","convert","toString","reporter","context","Syntax","RuleError","fixer","report","getSource","dictRule","prh","ruleContents","originalStrRule","Str","node","text","matches","forEach","match","index","fix","replaceTextRange","length","module","exports","linter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,SAAO,mBAAKA,MAAL,EAAaC,OAAb,CAAqB,IAArB,EAA2B,IAA3B,EAAiCC,QAAjC,EAAP;AACH;;AAED,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,MAAI;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,KAArB;AAA4BC,IAAAA,MAA5B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAtD,CADuB,CAEvB;;AACA,MAAIM,QAAQ,GAAGC,yBAAIJ,KAAJ,CAAUH,OAAV,EAAmB;AAC9BQ,IAAAA,YAAY,EAAE;AADgB,GAAnB,CAAf;;AAGA,MAAIC,eAAe,GAAGH,QAAQ,CAACL,MAAM,CAACS,GAAR,CAA9B,CANuB,CAOvB;;AACAJ,EAAAA,QAAQ,CAACL,MAAM,CAACS,GAAR,CAAR,GAAuB,UAAUC,IAAV,EAAgB;AACnCF,IAAAA,eAAe,CAACE,IAAD,CAAf;;AACA,QAAI,CAAC,iCAAkBA,IAAlB,EAAwBX,OAAxB,CAAL,EAAuC;AACnC;AACH;;AACD,QAAMY,IAAI,GAAGP,SAAS,CAACM,IAAD,CAAtB;AACA,QAAME,OAAO,GAAG,sCAAqBD,IAArB,EAA2B,qBAA3B,CAAhB;AACAC,IAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACvB,UAAM;AAAEC,QAAAA,KAAF;AAASJ,QAAAA;AAAT,UAAkBG,KAAxB;AACAX,MAAAA,MAAM,CACFO,IADE,EAEF,IAAIT,SAAJ,CAAc,kBAAd,EAAkC;AAC9Bc,QAAAA,KAAK,EAAEA,KADuB;AAE9BC,QAAAA,GAAG,EAAEd,KAAK,CAACe,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAGJ,IAAI,CAACO,MAArB,CAAvB,EAAqDxB,SAAS,CAACiB,IAAD,CAA9D;AAFyB,OAAlC,CAFE,CAAN;AAOH,KATD;AAUH,GAjBD;;AAkBA,SAAON,QAAP;AACH;;AACDc,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAEvB,QADK;AAEbI,EAAAA,KAAK,EAAEJ;AAFM,CAAjB","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.5.カタカナ\nカタカナは「全角」で表記します。\n半角カタカナは特殊な用途を除いて、原則として使いません。\n\nHalfwidth Katakana variants（半角片仮名）\n\\uFF65-\\uFF9F とする\nhttp://www.asahi-net.or.jp/~ax2s-kmtn/ref/unicode/uff00.html\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport prh from \"textlint-rule-prh\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport moji from \"moji\";\n/**\n * 半角カタカナを全角カタカナに変換\n *\n * @param {String} str 変換したい文字列\n */\nfunction toZenkaku(string) {\n    return moji(string).convert(\"HK\", \"ZK\").toString();\n}\n\nfunction reporter(context) {\n    let { Syntax, RuleError, fixer, report, getSource } = context;\n    // 辞書ベースのカタカタ表記のチェックを行う\n    let dictRule = prh.fixer(context, {\n        ruleContents: [fs.readFileSync(path.join(__dirname, \"..\", \"dict\", \"2.1.5.yml\"), \"utf-8\")]\n    });\n    let originalStrRule = dictRule[Syntax.Str];\n    // 半角カタカナの使用をチェックする\n    dictRule[Syntax.Str] = function (node) {\n        originalStrRule(node);\n        if (!isUserWrittenNode(node, context)) {\n            return;\n        }\n        const text = getSource(node);\n        const matches = matchCaptureGroupAll(text, /([\\uFF65-\\uFF9F]+)/g);\n        matches.forEach((match) => {\n            const { index, text } = match;\n            report(\n                node,\n                new RuleError(\"カタカナは「全角」で表記します。\", {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + text.length], toZenkaku(text))\n                })\n            );\n        });\n    };\n    return dictRule;\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"2.1.5.js"}