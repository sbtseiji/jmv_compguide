"use strict";
/*
 * This file is part of textlint-plugin-latex2e
 *
 * textlint-plugin-latex2e is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * textlint-plugin-latex2e is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with textlint-plugin-latex2e.  If not, see <http://www.gnu.org/licenses/>.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const commander_1 = require("commander");
const latex_to_ast_1 = require("../latex-to-ast");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const hasProperty = (obj, key) => {
    return !!obj && Object.prototype.hasOwnProperty.call(obj, key);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const removeLocAndRange = (node) => {
    if (hasProperty(node, "loc")) {
        delete node.loc;
    }
    if (hasProperty(node, "range")) {
        delete node.range;
    }
    for (const key of Object.getOwnPropertyNames(node)) {
        const val = node[key];
        if (typeof val === "object") {
            removeLocAndRange(val);
        }
    }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const removeRaw = (node) => {
    if (hasProperty(node, "raw")) {
        delete node.raw;
    }
    for (const key of Object.getOwnPropertyNames(node)) {
        const val = node[key];
        if (typeof val === "object") {
            removeRaw(val);
        }
    }
};
const program = new commander_1.Command();
program
    .option("-l, --location", "include location and range")
    .option("-r, --raw", "include raw")
    .usage("[OPTIONS] FILE")
    .parse(process.argv);
const filename = program.args[0];
if (!fs.existsSync(filename)) {
    if (!filename || filename === "") {
        program.help();
    }
    console.error(`${filename} does not exist`);
    process.exit(1);
}
if (path.extname(filename) !== ".tex") {
    console.error("Input file is not a TeX source.");
    process.exit(1);
}
const options = program.opts();
const enableLocation = options.location;
const enableRaw = options.raw;
const content = fs.readFileSync(filename);
const parsedAst = latex_to_ast_1.parse(content.toString());
if (!enableLocation) {
    removeLocAndRange(parsedAst);
}
if (!enableRaw) {
    removeRaw(parsedAst);
}
console.log(JSON.stringify(parsedAst, undefined, "  "));
