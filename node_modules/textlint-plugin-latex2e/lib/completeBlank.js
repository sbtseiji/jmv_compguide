"use strict";
/*
 * Copyright (c) 2020 Textlint Plugin LaTex2e team. All rights reserved.
 *
 * This file is part of textlint-plugin-latex2e.
 * This software is released under the MIT License, see LICENSE.md .
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ast_node_types_1 = require("@textlint/ast-node-types");
const calculatePosition_1 = __importDefault(require("./calculatePosition"));
const completeBlank = (text) => (node) => {
    if ("children" in node) {
        if (node.children.length === 0) {
            return node;
        }
        const children = [];
        for (let i = 0; i < node.children.length - 1; i++) {
            const range = [
                node.children[i].range[1],
                node.children[i + 1].range[0],
            ];
            if (range[0] !== range[1]) {
                children.push(completeBlank(text)(node.children[i]));
                children.push({
                    loc: {
                        start: calculatePosition_1.default(text, range[0]),
                        end: calculatePosition_1.default(text, range[1]),
                    },
                    range: range,
                    raw: text.slice(...range),
                    type: ast_node_types_1.ASTNodeTypes.Html,
                    value: text.slice(...range),
                });
            }
            else {
                children.push(completeBlank(text)(node.children[i]));
            }
        }
        children.push(completeBlank(text)(node.children[node.children.length - 1]));
        return Object.assign(Object.assign({}, node), { children });
    }
    else {
        return node;
    }
};
exports.default = completeBlank;
