"use strict";
/*
 * Copyright (c) 2020 Textlint Plugin LaTex2e team. All rights reserved.
 *
 * This file is part of textlint-plugin-latex2e.
 * This software is released under the MIT License, see LICENSE.md .
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ast_node_types_1 = require("@textlint/ast-node-types");
const Array_1 = require("fp-ts/lib/Array");
const Option_1 = require("fp-ts/lib/Option");
const pipeable_1 = require("fp-ts/lib/pipeable");
exports.default = (rootNode) => {
    const children = [];
    const pushChild = (paragraph) => {
        pipeable_1.pipe([Array_1.head(paragraph), Array_1.last(paragraph)], Array_1.array.sequence(Option_1.option), Option_1.map(([headNode, lastNode]) => {
            children.push({
                loc: {
                    start: headNode.loc.start,
                    end: lastNode.loc.end,
                },
                range: [headNode.range[0], lastNode.range[1]],
                raw: rootNode.raw.slice(headNode.range[0], lastNode.range[1]),
                type: ast_node_types_1.ASTNodeTypes.Paragraph,
                children: paragraph,
            });
        }));
    };
    let paragraph = [];
    for (const node of rootNode.children) {
        switch (node.type) {
            case ast_node_types_1.ASTNodeTypes.CodeBlock:
            case ast_node_types_1.ASTNodeTypes.Header:
            case ast_node_types_1.ASTNodeTypes.HtmlBlock:
                pushChild(paragraph);
                paragraph = [];
                children.push(node);
                break;
            case "parbreak":
                pushChild(paragraph);
                paragraph = [];
                break;
            default:
                paragraph.push(node);
        }
    }
    pushChild(paragraph);
    return Object.assign(Object.assign({}, rootNode), { children });
};
