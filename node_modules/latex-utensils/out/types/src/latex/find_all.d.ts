import { Node } from './latex_parser_types';
declare type Typeguard<T extends Node> = ((x: Node) => x is T) | ((x: Node) => boolean);
export declare function getChildNodes(node: Node): Node[];
declare type FindResult<T extends Node, P extends Node = Node> = {
    node: T;
    parent?: FindResult<P>;
};
export declare function find<T extends Node>(nodes: Node[], typeguard?: Typeguard<T>, parent?: FindResult<Node>): FindResult<T> | undefined;
export declare function findAll<T extends Node>(nodes: Node[], typeguard?: Typeguard<T>, parent?: FindResult<Node>): FindResult<T>[];
declare type SequenceResult<Ts extends Node[], P extends Node = Node> = {
    nodes: Ts;
    parent?: FindResult<P>;
};
export declare function findAllSequences<T extends Node>(nodes: Node[], typeguards: [Typeguard<T>], parent?: FindResult<Node>): SequenceResult<[T]>[];
export declare function findAllSequences<T1 extends Node, T2 extends Node>(nodes: Node[], typeguards: [Typeguard<T1>, Typeguard<T2>], parent?: FindResult<Node>): SequenceResult<[T1, T2]>[];
export declare function findAllSequences<T1 extends Node, T2 extends Node, T3 extends Node>(nodes: Node[], typeguards: [Typeguard<T1>, Typeguard<T2>, Typeguard<T3>], parent?: FindResult<Node>): SequenceResult<[T1, T2, T3]>[];
export declare function findAllSequences<T1 extends Node, T2 extends Node, T3 extends Node, T4 extends Node>(nodes: Node[], typeguards: [Typeguard<T1>, Typeguard<T2>, Typeguard<T3>, Typeguard<T4>], parent?: FindResult<Node>): SequenceResult<[T1, T2, T3, T4]>[];
export declare function findAllSequences<T1 extends Node, T2 extends Node, T3 extends Node, T4 extends Node, T5 extends Node>(nodes: Node[], typeguards: [Typeguard<T1>, Typeguard<T2>, Typeguard<T3>, Typeguard<T4>, Typeguard<T5>], parent?: FindResult<Node>): SequenceResult<[T1, T2, T3, T4, T5]>[];
export declare function findAllSequences(nodes: Node[], typeguards: Typeguard<Node>[], parent?: FindResult<Node>): SequenceResult<Node[]>[];
declare type Position = {
    /**
     * The one-based line value.
     */
    line: number;
    /**
     * The one-based column value.
     */
    column: number;
    /**
     * The zero-based offset value.
     */
    offset?: number;
    includeStart?: boolean;
    includeEnd?: boolean;
} | {
    /**
     * The one-based line value.
     */
    line?: number;
    /**
     * The one-based column value.
     */
    column?: number;
    /**
     * The zero-based offset value.
     */
    offset: number;
    includeStart?: boolean;
    includeEnd?: boolean;
};
export declare function findNodeAt(nodes: Node[], pos: Position, parent?: FindResult<Node>): FindResult<Node> | undefined;
export {};
