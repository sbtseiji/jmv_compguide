import { Node } from './latex_parser_types';
declare type MatchResult<T extends Node, P extends Pattern<Node, any> | undefined> = {
    node: T;
    parent: P extends undefined ? undefined : MatchResult<NonNullable<P>['target'], NonNullable<P>['parentPattern']>;
};
declare class Pattern<T extends Node, ParentPattern extends Pattern<Node, any> | undefined = undefined> {
    readonly typeguard: ((x: Node) => x is T) | ((x: Node) => boolean);
    parentPattern: ParentPattern;
    target: T;
    constructor(typeguard: ((x: Node) => x is T) | ((x: Node) => boolean), parentPattern?: ParentPattern);
    child<C extends Node>(typeguard: ((x: Node) => x is C) | ((x: Node) => boolean)): Pattern<C, Pattern<T, ParentPattern>>;
    match(nodes: Node[], opt?: {
        traverseAll: boolean;
    }): MatchResult<T, ParentPattern> | undefined;
    matchAll(nodes: Node[], opt?: {
        traverseAll: boolean;
    }): MatchResult<T, ParentPattern>[];
}
export declare function pattern<T extends Node>(typeguard: ((x: Node) => x is T) | ((x: Node) => boolean)): Pattern<T, undefined>;
export {};
